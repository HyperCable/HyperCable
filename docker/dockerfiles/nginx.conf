worker_processes  auto;
worker_rlimit_nofile 100000;
error_log /dev/stdout info;

env REDIS_HOST;
env REDIS_PORT;
events {
    multi_accept on;
    use epoll;
    worker_connections 4000;

}
http {
    init_worker_by_lua_block {
        local uuid = require 'resty.jit-uuid'
        uuid.seed()
    }
    resolver 127.0.0.11 ipv6=off;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    tcp_nopush on;
    tcp_nodelay on;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 2;
    keepalive_timeout 30;
    keepalive_requests 100000;

    server {
        listen        8000;
        charset       utf-8;
        charset_types application/json;
        default_type  application/json;


        lua_code_cache on;
        lua_need_request_body on;
        real_ip_header X-Forwarded-For;
        # set_real_ip_from 0.0.0.0/0;

        location ~ /g/collect {
            if ($request_method ~* "(GET|POST)") {
                add_header "Access-Control-Allow-Origin"  *;
            }

            if ($request_method = OPTIONS ) {
                add_header "Access-Control-Allow-Origin"  *;
                add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
                add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
                return 200;
            }

            content_by_lua '
                local uuid = require "resty.jit-uuid"
                local cjson = require "cjson"
                local redis = require "resty.redis"
                local r     = redis:new()
                local ok, err = r:connect(os.getenv("REDIS_HOST"), os.getenv("REDIS_PORT"))

                if not ok then
                  ngx.say(cjson.encode({
                    status = "error", 
                    msg =  "failed to connect: " .. err
                    }
                   )
                  )
                  return
                end

                local payload = {}

                local req = {}
                req["ip"] = ngx.var.remote_addr
                req["user_agent"] = ngx.var.http_user_agent
                req["x_forwarded_for"] = ngx.var.http_x_forwarded_for
                req["path"] = ngx.var.request_uri
                
                local query = ngx.req.get_uri_args()
                local post = ngx.req.get_body_data()

                payload["class"] = "EventJob"
 
                payload["queue"] = "default"
                payload["jid"] = uuid()
                payload["args"] = {query, post, req}
                payload["retry"] = true
                payload["created_at"] = os.time()
                payload["enqueued_at"] = os.time()

                assert(r:lpush("queue:default", cjson.encode(payload)))
                r:set_keepalive()
                r = nil
                ngx.status  = ngx.HTTP_OK
                return ngx.exit(ngx.HTTP_OK)
            ';
        }
    }
}